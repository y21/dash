use dash_proc_macro::Trace;

use crate::gc::handle::Handle;
use crate::gc::interner::{self, sym};
use crate::gc::Gc;
use crate::js_std;
use crate::value::error::{AggregateError, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError};
use crate::value::function::{Function, FunctionKind};
use crate::value::map::Map;
use crate::value::regex::RegExp;
use crate::value::set::Set;
use crate::value::PureBuiltin;

use super::value::array::{Array, ArrayIterator};
use super::value::arraybuffer::ArrayBuffer;
use super::value::boxed::{
    Boolean as BoxedBoolean, Number as BoxedNumber, String as BoxedString, Symbol as BoxedSymbol,
};
use super::value::error::Error;
use super::value::function::generator::GeneratorIterator;
use super::value::function::native::NativeFunction;
use super::value::object::{NamedObject, Object};
use super::value::primitive::Symbol;

#[derive(Trace)]
pub struct Statics {
    pub function_proto: Handle,
    pub function_ctor: Handle,
    pub function_apply: Handle,
    pub function_bind: Handle,
    pub function_call: Handle,
    pub function_to_string: Handle,
    pub is_nan: Handle,
    pub eval: Handle,
    pub is_finite: Handle,
    pub parse_float: Handle,
    pub parse_int: Handle,
    pub console: Handle,
    pub console_log: Handle,
    pub math: Handle,
    pub math_floor: Handle,
    pub math_abs: Handle,
    pub math_acos: Handle,
    pub math_acosh: Handle,
    pub math_asin: Handle,
    pub math_asinh: Handle,
    pub math_atan: Handle,
    pub math_atanh: Handle,
    pub math_atan2: Handle,
    pub math_cbrt: Handle,
    pub math_ceil: Handle,
    pub math_clz32: Handle,
    pub math_cos: Handle,
    pub math_cosh: Handle,
    pub math_exp: Handle,
    pub math_expm1: Handle,
    pub math_log: Handle,
    pub math_log1p: Handle,
    pub math_log10: Handle,
    pub math_log2: Handle,
    pub math_round: Handle,
    pub math_sin: Handle,
    pub math_sinh: Handle,
    pub math_sqrt: Handle,
    pub math_tan: Handle,
    pub math_tanh: Handle,
    pub math_trunc: Handle,
    pub math_random: Handle,
    pub math_max: Handle,
    pub math_min: Handle,
    pub math_pow: Handle,
    pub object_ctor: Handle,
    pub object_prototype: Handle,
    pub object_create: Handle,
    pub object_keys: Handle,
    pub object_to_string: Handle,
    pub object_get_own_property_descriptor: Handle,
    pub object_get_own_property_descriptors: Handle,
    pub object_has_own_property: Handle,
    pub object_define_property: Handle,
    pub object_define_properties: Handle,
    pub object_assign: Handle,
    pub object_entries: Handle,
    pub object_get_prototype_of: Handle,
    pub object_set_prototype_of: Handle,
    pub object_is_prototype_of: Handle,
    pub object_property_is_enumerable: Handle,
    pub number_ctor: Handle,
    pub number_prototype: Handle,
    pub number_tostring: Handle,
    pub number_is_finite: Handle,
    pub number_is_nan: Handle,
    pub number_is_safe_integer: Handle,
    pub number_is_integer: Handle,
    pub number_to_fixed: Handle,
    pub boolean_ctor: Handle,
    pub boolean_tostring: Handle,
    pub boolean_prototype: Handle,
    pub boolean_valueof: Handle,
    pub string_ctor: Handle,
    pub string_prototype: Handle,
    pub string_tostring: Handle,
    pub string_char_at: Handle,
    pub string_char_code_at: Handle,
    pub string_concat: Handle,
    pub string_ends_with: Handle,
    pub string_starts_with: Handle,
    pub string_includes: Handle,
    pub string_index_of: Handle,
    pub string_last_index_of: Handle,
    pub string_pad_end: Handle,
    pub string_pad_start: Handle,
    pub string_repeat: Handle,
    pub string_replace: Handle,
    pub string_replace_all: Handle,
    pub string_split: Handle,
    pub string_to_uppercase: Handle,
    pub string_to_lowercase: Handle,
    pub string_big: Handle,
    pub string_blink: Handle,
    pub string_bold: Handle,
    pub string_fixed: Handle,
    pub string_italics: Handle,
    pub string_strike: Handle,
    pub string_sub: Handle,
    pub string_sup: Handle,
    pub string_fontcolor: Handle,
    pub string_fontsize: Handle,
    pub string_link: Handle,
    pub string_trim: Handle,
    pub string_trim_start: Handle,
    pub string_trim_end: Handle,
    pub string_from_char_code: Handle,
    pub string_substr: Handle,
    pub string_substring: Handle,
    pub string_slice: Handle,
    pub string_iterator: Handle,
    pub array_ctor: Handle,
    pub array_tostring: Handle,
    pub array_prototype: Handle,
    pub array_join: Handle,
    pub array_values: Handle,
    pub symbol_ctor: Handle,
    pub symbol_prototype: Handle,
    pub symbol_async_iterator: Symbol,
    pub symbol_has_instance: Symbol,
    pub symbol_is_concat_spreadable: Symbol,
    pub symbol_iterator: Symbol,
    pub symbol_match: Symbol,
    pub symbol_match_all: Symbol,
    pub symbol_replace: Symbol,
    pub symbol_search: Symbol,
    pub symbol_species: Symbol,
    pub symbol_split: Symbol,
    pub symbol_to_primitive: Symbol,
    pub symbol_to_string_tag: Symbol,
    pub symbol_unscopables: Symbol,
    pub array_iterator_prototype: Handle,
    pub array_iterator_next: Handle,
    pub identity_this: Handle,
    pub array_at: Handle,
    pub array_concat: Handle,
    pub array_entries: Handle,
    pub array_keys: Handle,
    pub array_every: Handle,
    pub array_some: Handle,
    pub array_fill: Handle,
    pub array_filter: Handle,
    pub array_reduce: Handle,
    pub array_find: Handle,
    pub array_find_index: Handle,
    pub array_flat: Handle,
    pub array_for_each: Handle,
    pub array_includes: Handle,
    pub array_index_of: Handle,
    pub array_map: Handle,
    pub array_pop: Handle,
    pub array_push: Handle,
    pub array_reverse: Handle,
    pub array_shift: Handle,
    pub array_sort: Handle,
    pub array_unshift: Handle,
    pub array_slice: Handle,
    pub array_last_index_of: Handle,
    pub array_from: Handle,
    pub array_is_array: Handle,
    pub generator_iterator_prototype: Handle,
    pub generator_iterator_next: Handle,
    pub error_ctor: Handle,
    pub error_prototype: Handle,
    pub error_to_string: Handle,
    pub eval_error_ctor: Handle,
    pub eval_error_prototype: Handle,
    pub range_error_ctor: Handle,
    pub range_error_prototype: Handle,
    pub reference_error_ctor: Handle,
    pub reference_error_prototype: Handle,
    pub syntax_error_ctor: Handle,
    pub syntax_error_prototype: Handle,
    pub type_error_ctor: Handle,
    pub type_error_prototype: Handle,
    pub uri_error_ctor: Handle,
    pub uri_error_prototype: Handle,
    pub aggregate_error_ctor: Handle,
    pub aggregate_error_prototype: Handle,
    pub arraybuffer_ctor: Handle,
    pub arraybuffer_prototype: Handle,
    pub arraybuffer_byte_length: Handle,
    pub uint8array_ctor: Handle,
    pub uint8array_prototype: Handle,
    pub int8array_ctor: Handle,
    pub int8array_prototype: Handle,
    pub uint16array_ctor: Handle,
    pub uint16array_prototype: Handle,
    pub int16array_ctor: Handle,
    pub int16array_prototype: Handle,
    pub uint32array_ctor: Handle,
    pub uint32array_prototype: Handle,
    pub int32array_ctor: Handle,
    pub int32array_prototype: Handle,
    pub float32array_ctor: Handle,
    pub float32array_prototype: Handle,
    pub float64array_ctor: Handle,
    pub float64array_prototype: Handle,
    pub typedarray_fill: Handle,
    pub promise_ctor: Handle,
    pub promise_proto: Handle,
    pub promise_resolve: Handle,
    pub promise_reject: Handle,
    pub promise_then: Handle,
    pub set_constructor: Handle,
    pub set_prototype: Handle,
    pub set_add: Handle,
    pub set_has: Handle,
    pub set_delete: Handle,
    pub set_clear: Handle,
    pub set_size: Handle,
    pub map_constructor: Handle,
    pub map_prototype: Handle,
    pub map_set: Handle,
    pub map_get: Handle,
    pub map_has: Handle,
    pub map_delete: Handle,
    pub map_clear: Handle,
    pub map_size: Handle,
    pub regexp_ctor: Handle,
    pub regexp_prototype: Handle,
    pub regexp_test: Handle,
    pub regexp_exec: Handle,
    pub date_ctor: Handle,
    pub date_prototype: Handle,
    pub date_now: Handle,
    pub json_ctor: Handle,
    pub json_parse: Handle,
}

fn builtin_object<O: Object + 'static>(gc: &mut Gc, obj: O) -> Handle {
    gc.register(PureBuiltin::new(obj))
}

fn empty_object(gc: &mut Gc) -> Handle {
    builtin_object(gc, NamedObject::null())
}

fn function(gc: &mut Gc, name: interner::Symbol, cb: NativeFunction) -> Handle {
    let f = Function::with_obj(Some(name.into()), FunctionKind::Native(cb), NamedObject::null());
    gc.register(PureBuiltin::new(f))
}

impl Statics {
    pub fn new(gc: &mut Gc) -> Self {
        Self {
            function_proto: empty_object(gc),
            function_ctor: function(gc, sym::Function, js_std::function::constructor),
            function_apply: function(gc, sym::apply, js_std::function::apply),
            function_bind: function(gc, sym::bind, js_std::function::bind),
            function_call: function(gc, sym::call, js_std::function::call),
            function_to_string: function(gc, sym::toString, js_std::function::to_string),
            console: empty_object(gc),
            console_log: function(gc, sym::log, js_std::global::log),
            math: empty_object(gc),
            math_floor: function(gc, sym::floor, js_std::math::floor),
            object_ctor: function(gc, sym::object, js_std::object::constructor),
            object_create: function(gc, sym::create, js_std::object::create),
            object_keys: function(gc, sym::keys, js_std::object::keys),
            object_prototype: empty_object(gc),
            object_to_string: function(gc, sym::toString, js_std::object::to_string),
            object_get_own_property_descriptor: function(
                gc,
                sym::getOwnPropertyDescriptor,
                js_std::object::get_own_property_descriptor,
            ),
            object_get_own_property_descriptors: function(
                gc,
                sym::getOwnPropertyDescriptors,
                js_std::object::get_own_property_descriptors,
            ),
            object_has_own_property: function(gc, sym::hasOwnProperty, js_std::object::has_own_property),
            object_define_property: function(gc, sym::defineProperty, js_std::object::define_property),
            object_define_properties: function(gc, sym::defineProperties, js_std::object::define_properties),
            object_assign: function(gc, sym::assign, js_std::object::assign),
            object_entries: function(gc, sym::entries, js_std::object::entries),
            object_get_prototype_of: function(gc, sym::getPrototypeOf, js_std::object::get_prototype_of),
            object_set_prototype_of: function(gc, sym::setPrototypeOf, js_std::object::set_prototype_of),
            object_is_prototype_of: function(gc, sym::isPrototypeOf, js_std::object::is_prototype_of),
            object_property_is_enumerable: function(
                gc,
                sym::propertyIsEnumerable,
                js_std::object::property_is_enumerable,
            ),
            number_ctor: function(gc, sym::Number, js_std::number::constructor),
            number_prototype: builtin_object(gc, BoxedNumber::with_obj(0.0, NamedObject::null())),
            number_tostring: function(gc, sym::toString, js_std::number::to_string),
            boolean_ctor: function(gc, sym::Boolean, js_std::boolean::constructor),
            boolean_tostring: function(gc, sym::toString, js_std::boolean::to_string),
            boolean_prototype: builtin_object(gc, BoxedBoolean::with_obj(false, NamedObject::null())),
            string_ctor: function(gc, sym::String, js_std::string::constructor),
            string_prototype: builtin_object(gc, BoxedString::with_obj(sym::empty.into(), NamedObject::null())),
            is_nan: function(gc, sym::isNaN, js_std::global::is_nan),
            eval: function(gc, sym::eval, js_std::global::eval),
            is_finite: function(gc, sym::isFinite, js_std::global::is_finite),
            parse_float: function(gc, sym::parseFloat, js_std::global::parse_float),
            parse_int: function(gc, sym::parseInt, js_std::global::parse_int),
            math_abs: function(gc, sym::abs, js_std::math::abs),
            math_acos: function(gc, sym::acos, js_std::math::acos),
            math_acosh: function(gc, sym::acosh, js_std::math::acosh),
            math_asin: function(gc, sym::asin, js_std::math::asin),
            math_asinh: function(gc, sym::asinh, js_std::math::asinh),
            math_atan: function(gc, sym::atan, js_std::math::atan),
            math_atanh: function(gc, sym::atanh, js_std::math::atanh),
            math_atan2: function(gc, sym::atan2, js_std::math::atan2),
            math_cbrt: function(gc, sym::cbrt, js_std::math::cbrt),
            math_ceil: function(gc, sym::ceil, js_std::math::ceil),
            math_clz32: function(gc, sym::clz32, js_std::math::clz32),
            math_cos: function(gc, sym::cos, js_std::math::cos),
            math_cosh: function(gc, sym::cosh, js_std::math::cosh),
            math_exp: function(gc, sym::exp, js_std::math::exp),
            math_expm1: function(gc, sym::expm1, js_std::math::expm1),
            math_log: function(gc, sym::log, js_std::math::log),
            math_log1p: function(gc, sym::log1p, js_std::math::log1p),
            math_log10: function(gc, sym::log10, js_std::math::log10),
            math_log2: function(gc, sym::log2, js_std::math::log2),
            math_round: function(gc, sym::round, js_std::math::round),
            math_sin: function(gc, sym::sin, js_std::math::sin),
            math_sinh: function(gc, sym::sinh, js_std::math::sinh),
            math_sqrt: function(gc, sym::sqrt, js_std::math::sqrt),
            math_tan: function(gc, sym::tan, js_std::math::tan),
            math_tanh: function(gc, sym::tanh, js_std::math::tanh),
            math_trunc: function(gc, sym::trunc, js_std::math::trunc),
            math_random: function(gc, sym::random, js_std::math::random),
            math_max: function(gc, sym::max, js_std::math::max),
            math_min: function(gc, sym::min, js_std::math::min),
            math_pow: function(gc, sym::pow, js_std::math::pow),
            number_is_finite: function(gc, sym::isFinite, js_std::number::is_finite),
            number_is_nan: function(gc, sym::isNaN, js_std::number::is_nan),
            number_is_safe_integer: function(gc, sym::isSafeInteger, js_std::number::is_safe_integer),
            number_is_integer: function(gc, sym::isInteger, js_std::number::is_integer),
            number_to_fixed: function(gc, sym::toFixed, js_std::number::to_fixed),
            boolean_valueof: function(gc, sym::valueOf, js_std::boolean::value_of),
            string_tostring: function(gc, sym::toString, js_std::string::to_string),
            string_char_at: function(gc, sym::charAt, js_std::string::char_at),
            string_char_code_at: function(gc, sym::charCodeAt, js_std::string::char_code_at),
            string_concat: function(gc, sym::concat, js_std::string::concat),
            string_ends_with: function(gc, sym::endsWith, js_std::string::ends_with),
            string_starts_with: function(gc, sym::startsWith, js_std::string::starts_with),
            string_includes: function(gc, sym::includes, js_std::string::includes),
            string_index_of: function(gc, sym::indexOf, js_std::string::index_of),
            string_last_index_of: function(gc, sym::lastIndexOf, js_std::string::last_index_of),
            string_pad_end: function(gc, sym::padEnd, js_std::string::pad_end),
            string_pad_start: function(gc, sym::padStart, js_std::string::pad_start),
            string_repeat: function(gc, sym::repeat, js_std::string::repeat),
            string_replace: function(gc, sym::replace, js_std::string::replace),
            string_replace_all: function(gc, sym::replaceAll, js_std::string::replace_all),
            string_split: function(gc, sym::split, js_std::string::split),
            string_to_uppercase: function(gc, sym::toUpperCase, js_std::string::to_uppercase),
            string_to_lowercase: function(gc, sym::toLowerCase, js_std::string::to_lowercase),
            string_big: function(gc, sym::big, js_std::string::big),
            string_blink: function(gc, sym::blink, js_std::string::blink),
            string_bold: function(gc, sym::bold, js_std::string::bold),
            string_fixed: function(gc, sym::fixed, js_std::string::fixed),
            string_italics: function(gc, sym::italics, js_std::string::italics),
            string_strike: function(gc, sym::strike, js_std::string::strike),
            string_sub: function(gc, sym::sub, js_std::string::sub),
            string_sup: function(gc, sym::sup, js_std::string::sup),
            string_fontcolor: function(gc, sym::fontcolor, js_std::string::fontcolor),
            string_fontsize: function(gc, sym::fontsize, js_std::string::fontsize),
            string_link: function(gc, sym::link, js_std::string::link),
            string_trim: function(gc, sym::trim, js_std::string::trim),
            string_trim_start: function(gc, sym::trimStart, js_std::string::trim_start),
            string_trim_end: function(gc, sym::trimEnd, js_std::string::trim_end),
            string_from_char_code: function(gc, sym::fromCharCode, js_std::string::from_char_code),
            string_substr: function(gc, sym::substr, js_std::string::substr),
            string_substring: function(gc, sym::substring, js_std::string::substring),
            string_slice: function(gc, sym::slice, js_std::string::slice),
            string_iterator: function(gc, sym::iterator, js_std::string::iterator),
            array_ctor: function(gc, sym::Array, js_std::array::constructor),
            array_tostring: function(gc, sym::toString, js_std::array::to_string),
            array_prototype: builtin_object(gc, Array::with_obj(NamedObject::null())),
            array_join: function(gc, sym::join, js_std::array::join),
            array_values: function(gc, sym::values, js_std::array::values),
            array_reverse: function(gc, sym::reverse, js_std::array::reverse),
            symbol_ctor: function(gc, sym::JsSymbol, js_std::symbol::constructor),
            symbol_prototype: builtin_object(
                gc,
                BoxedSymbol::with_obj(Symbol::new(sym::empty.into()), NamedObject::null()),
            ),
            symbol_async_iterator: Symbol::new(sym::asyncIterator.into()),
            symbol_has_instance: Symbol::new(sym::hasInstance.into()),
            symbol_is_concat_spreadable: Symbol::new(sym::isConcatSpreadable.into()),
            symbol_iterator: Symbol::new(sym::iterator.into()),
            symbol_match: Symbol::new(sym::match_.into()),
            symbol_match_all: Symbol::new(sym::matchAll.into()),
            symbol_replace: Symbol::new(sym::replace.into()),
            symbol_search: Symbol::new(sym::search.into()),
            symbol_species: Symbol::new(sym::species.into()),
            symbol_split: Symbol::new(sym::split.into()),
            symbol_to_primitive: Symbol::new(sym::toPrimitive.into()),
            symbol_to_string_tag: Symbol::new(sym::toStringTag.into()),
            symbol_unscopables: Symbol::new(sym::unscopables.into()),
            array_iterator_prototype: builtin_object(gc, ArrayIterator::empty()),
            array_iterator_next: function(gc, sym::next, js_std::array_iterator::next),
            identity_this: function(gc, sym::iterator, js_std::identity_this),
            array_at: function(gc, sym::at, js_std::array::at),
            array_concat: function(gc, sym::concat, js_std::array::concat),
            array_entries: function(gc, sym::entries, js_std::array::entries),
            array_keys: function(gc, sym::keys, js_std::array::keys),
            array_every: function(gc, sym::every, js_std::array::every),
            array_some: function(gc, sym::some, js_std::array::some),
            array_fill: function(gc, sym::fill, js_std::array::fill),
            array_filter: function(gc, sym::filter, js_std::array::filter),
            array_reduce: function(gc, sym::reduce, js_std::array::reduce),
            array_find: function(gc, sym::find, js_std::array::find),
            array_find_index: function(gc, sym::findIndex, js_std::array::find_index),
            array_flat: function(gc, sym::flat, js_std::array::flat),
            array_for_each: function(gc, sym::forEach, js_std::array::for_each),
            array_includes: function(gc, sym::includes, js_std::array::includes),
            array_index_of: function(gc, sym::indexOf, js_std::array::index_of),
            array_map: function(gc, sym::map, js_std::array::map),
            array_pop: function(gc, sym::pop, js_std::array::pop),
            array_push: function(gc, sym::push, js_std::array::push),
            array_shift: function(gc, sym::shift, js_std::array::shift),
            array_sort: function(gc, sym::sort, js_std::array::sort),
            array_unshift: function(gc, sym::unshift, js_std::array::unshift),
            array_slice: function(gc, sym::slice, js_std::array::slice),
            array_last_index_of: function(gc, sym::lastIndexOf, js_std::array::last_index_of),
            array_from: function(gc, sym::from, js_std::array::from),
            array_is_array: function(gc, sym::isArray, js_std::array::is_array),
            generator_iterator_prototype: {
                let obj = gc.register(NamedObject::null());
                builtin_object(gc, GeneratorIterator::empty(obj))
            },
            generator_iterator_next: function(gc, sym::next, js_std::generator::next),
            error_ctor: function(gc, sym::Error, js_std::error::error_constructor),
            error_prototype: builtin_object(gc, Error::empty()),
            error_to_string: function(gc, sym::toString, js_std::error::to_string),
            eval_error_ctor: function(gc, sym::EvalError, js_std::error::eval_error_constructor),
            eval_error_prototype: builtin_object(gc, EvalError::empty()),
            range_error_ctor: function(gc, sym::RangeError, js_std::error::range_error_constructor),
            range_error_prototype: builtin_object(gc, RangeError::empty()),
            reference_error_ctor: function(gc, sym::ReferenceError, js_std::error::reference_error_constructor),
            reference_error_prototype: builtin_object(gc, ReferenceError::empty()),
            syntax_error_ctor: function(gc, sym::SyntaxError, js_std::error::syntax_error_constructor),
            syntax_error_prototype: builtin_object(gc, SyntaxError::empty()),
            type_error_ctor: function(gc, sym::TypeError, js_std::error::type_error_constructor),
            type_error_prototype: builtin_object(gc, TypeError::empty()),
            uri_error_ctor: function(gc, sym::URIError, js_std::error::uri_error_constructor),
            uri_error_prototype: builtin_object(gc, URIError::empty()),
            aggregate_error_ctor: function(gc, sym::AggregateError, js_std::error::aggregate_error_constructor),
            aggregate_error_prototype: builtin_object(gc, AggregateError::empty()),
            arraybuffer_ctor: function(gc, sym::ArrayBuffer, js_std::arraybuffer::constructor),
            arraybuffer_prototype: builtin_object(gc, ArrayBuffer::empty()),
            arraybuffer_byte_length: function(gc, sym::byteLength, js_std::arraybuffer::byte_length),
            uint8array_ctor: function(gc, sym::Uint8Array, js_std::typedarray::u8array::constructor),
            uint8array_prototype: empty_object(gc),
            int8array_ctor: function(gc, sym::Int8Array, js_std::typedarray::i8array::constructor),
            int8array_prototype: empty_object(gc),
            uint16array_ctor: function(gc, sym::Uint16Array, js_std::typedarray::u16array::constructor),
            uint16array_prototype: empty_object(gc),
            int16array_ctor: function(gc, sym::Int16Array, js_std::typedarray::i16array::constructor),
            int16array_prototype: empty_object(gc),
            uint32array_ctor: function(gc, sym::Uint32Array, js_std::typedarray::u32array::constructor),
            uint32array_prototype: empty_object(gc),
            int32array_ctor: function(gc, sym::Int32Array, js_std::typedarray::i32array::constructor),
            int32array_prototype: empty_object(gc),
            float32array_ctor: function(gc, sym::Float32Array, js_std::typedarray::f32array::constructor),
            float32array_prototype: empty_object(gc),
            float64array_ctor: function(gc, sym::Float64Array, js_std::typedarray::f64array::constructor),
            float64array_prototype: empty_object(gc),
            typedarray_fill: function(gc, sym::fill, js_std::typedarray::fill),
            promise_ctor: function(gc, sym::Promise, js_std::promise::constructor),
            promise_proto: empty_object(gc),
            promise_resolve: function(gc, sym::resolve, js_std::promise::resolve),
            promise_reject: function(gc, sym::reject, js_std::promise::reject),
            promise_then: function(gc, sym::then, js_std::promise::then),
            set_constructor: function(gc, sym::Set, js_std::set::constructor),
            set_add: function(gc, sym::add, js_std::set::add),
            set_has: function(gc, sym::has, js_std::set::has),
            set_delete: function(gc, sym::delete, js_std::set::delete),
            set_prototype: builtin_object(gc, Set::with_obj(NamedObject::null())),
            set_clear: function(gc, sym::clear, js_std::set::clear),
            set_size: function(gc, sym::size, js_std::set::size),
            map_constructor: function(gc, sym::Map, js_std::map::constructor),
            map_set: function(gc, sym::set, js_std::map::set),
            map_get: function(gc, sym::get, js_std::map::get),
            map_has: function(gc, sym::has, js_std::map::has),
            map_delete: function(gc, sym::delete, js_std::map::delete),
            map_prototype: builtin_object(gc, Map::with_obj(NamedObject::null())),
            map_clear: function(gc, sym::clear, js_std::map::clear),
            map_size: function(gc, sym::size, js_std::map::size),
            regexp_ctor: function(gc, sym::RegExp, js_std::regex::constructor),
            regexp_prototype: builtin_object(gc, RegExp::empty()),
            regexp_test: function(gc, sym::test, js_std::regex::test),
            regexp_exec: function(gc, sym::exec, js_std::regex::exec),
            date_ctor: function(gc, sym::Date, js_std::date::constructor),
            date_prototype: builtin_object(gc, NamedObject::null()),
            date_now: function(gc, sym::now, js_std::date::now),
            json_ctor: function(gc, sym::JSON, js_std::json::constructor),
            json_parse: function(gc, sym::parse, js_std::json::parse),
        }
    }
}
